#!/usr/bin/env python
from collections import OrderedDict
import logging
import sys
import time
from xmpptest.client import Sender, Receiver
from xmpptest.common.constants import INTERVAL, RUN_COUNT, XMPP_HOST, XMPP_PORT, \
    CLIENT_CONNECT_TIME
from xmpptest.common.utils import make_processes
from optparse import OptionParser


if __name__ == '__main__':
    usage = "usage: %prog [host:port] -f <testfile> [options]"
    optp = OptionParser(usage=usage)
    # Output verbosity options.
    optp.add_option('-q', '--quiet', help='set logging to ERROR',
                    action='store_const', dest='loglevel',
                    const=logging.ERROR, default=logging.INFO)
    optp.add_option('-d', '--debug', help='set logging to DEBUG',
                    action='store_const', dest='loglevel',
                    const=logging.DEBUG, default=logging.INFO)
    optp.add_option('-v', '--verbose', help='set logging to COMM',
                    action='store_const', dest='loglevel',
                    const=5, default=logging.INFO)
    optp.add_option('-f', '--file',
                    help='file with MSISDN:pass format',
                    dest='filename')
    optp.add_option('-w', '--workers',
                    help='workers count', type='int',
                    dest='workers', default=1)
    optp.add_option('-i', '--interval',
                    help='interval in seconds (float) between '
                         'messages and status update', type='float',
                    dest='interval', default=INTERVAL)
    optp.add_option('-r', '--runs',
                    help='runs count', type='int',
                    dest='runs', default=RUN_COUNT)
    optp.add_option('-p', '--connect_pause',
                    help='pause between processes run in seconds (float)',
                    type='float',
                    dest='connect_pause', default=CLIENT_CONNECT_TIME)

    opts, args = optp.parse_args()

    host = None
    port = None
    if not len(args):
        host = XMPP_HOST
        port = XMPP_PORT
    elif len(args) == 1:
        (host, port) = args[0].split(":")
    if len(args) > 1:
        print("Please set only one host")

    logging.basicConfig(level=opts.loglevel,
                        format='%(levelname)-8s %(message)s')

    if not opts.filename:
        print("Please specify the filename for tests")
        optp.print_help()
        sys.exit(1)

    user_file_data = ""
    try:
        with open(opts.filename, 'r') as user_file:
            user_file_data = user_file.readlines()
    except (FileExistsError, FileNotFoundError) as e:
        print("Can't read file %s" % opts.filename)
        print(e)

    # parse file
    users = OrderedDict()
    for line in user_file_data:
        (msisdn, password) = line.rstrip().split(":")
        users.update({msisdn: password})

    if len(users) % 2:
        print("Please check file %s. Count of lines must be even")
        sys.exit(1)

    # distribute senders and receivers to workers
    is_receiver = True
    clients = []
    for msisdn, password in users.items():
        if is_receiver:
            clients.append(Receiver(msisdn, password, opts, host, port))
            is_receiver = not is_receiver
        else:
            clients.append(Sender(msisdn, password, clients[-1].msisdn,
                                  "test mmsg", opts, host, port))
            is_receiver = not is_receiver

    clients_for_worker = {}
    cid = 0
    clients_per_worker = int(len(clients) / opts.workers)
    clients.reverse()
    for wid in range(opts.workers):
        for _junk in range(clients_per_worker):
            if not clients_for_worker.get(wid):
                clients_for_worker[wid] = [clients.pop(), ]
            else:
                clients_for_worker[wid].append(clients.pop())
    while len(clients):
        clients_for_worker[wid].append(clients.pop())
    procs, results_dict = make_processes(clients_for_worker)
    for proc in procs:
        proc.daemon = True
        time.sleep(opts.connect_pause)
        proc.start()
    for proc in procs:
        proc.join()
        logging.info("Joined process %s" % proc)
    print(results_dict)
    sys.exit(0)
